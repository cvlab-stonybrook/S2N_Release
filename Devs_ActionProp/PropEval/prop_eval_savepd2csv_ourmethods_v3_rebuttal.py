# same as _ourmethods except that using the ground truth generated by ICCV2017 https://github.com/yjxiong/action-detection
# this is a faster version than v2
import os, sys
project_root = os.path.join(os.path.expanduser('~'), 'Dev/NetModules')
sys.path.append(project_root)
import io
import requests
import matplotlib as mpl

mpl.use('Agg')
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import pickle
import progressbar
import prop_eval_utils_mod3 as prop_eval_utils


baseline_name = 'ActionExp_v3_l2_loss-NoDepsIn3-assgin0.50-alpha0.1000-dim512-dropout0.5000-seqlen90-L2-HUG-0014'
overlap = 0.75
# save_name = 'ActionEXP_v3_NMS{:.2f}'.format(overlap)
save_name = 'L2-HUG'
prediction_file = '/home/zwei/Dev/NetModules/Devs_ActionProp/PropEval/baselines_results/{:s}_thumos14_test.csv'.format(baseline_name)
ground_truth_file = '/home/zwei/Dev/NetModules/Devs_ActionProp/action_det_prep/thumos14_tag_test_proposal_list.csv'




proposal_results = pd.read_csv(prediction_file, sep=' ')
ground_truth = pd.read_csv(ground_truth_file, sep=' ')

target_video_frms = ground_truth[['video-name', 'video-frames']].drop_duplicates().values
frm_nums = {}
for s_target_videofrms in target_video_frms:
    frm_nums[s_target_videofrms[0]] = s_target_videofrms[1]

video_lst_prop = proposal_results['video-name'].unique()
video_lst_gt = ground_truth['video-name'].unique()
video_lst = np.intersect1d(video_lst_prop, video_lst_gt)
score_lst, score_name, n_effective_proposals = prop_eval_utils.common_pruning_nms(video_lst, proposal_results, ground_truth, value=overlap)
# effective_number_proposals =

average_recall, average_nr_proposals = prop_eval_utils.average_recall_vs_nr_proposals(video_lst, score_lst, score_name, n_effective_proposals)

average_recall_freq, freqs = prop_eval_utils.average_recall_vs_freq(video_lst, score_lst, score_name, n_effective_proposals, frm_nums)

recall, tiou_thresholds = prop_eval_utils.recall_vs_tiou_thresholds(video_lst, score_lst, score_name, n_effective_proposals,
                                                                    nr_proposals=1000)

recall_freq, tiou_thresholds_freq = prop_eval_utils.recall_freq_vs_tiou_thresholds(video_lst, score_lst, score_name, n_effective_proposals, frm_nums,
                                                                                   pdefined_freq=1.0)



avg_prop_pnt_file = "./baseline_pnt_pairs/{:s}_avg_prop_pnt_pairs.npy"
np.save(avg_prop_pnt_file.format(save_name), np.array([average_nr_proposals, average_recall]))

freq_pnt_file = "./baseline_pnt_pairs/{:s}_freq_pnt_pairs.npy"
np.save(freq_pnt_file.format(save_name), np.array([freqs, average_recall_freq]))

recall1000_pnt_file = "./baseline_pnt_pairs/{:s}_recall_pnt_pairs.npy"

np.save(recall1000_pnt_file.format(save_name), np.array([tiou_thresholds, recall]))

recall_freq_pnt_file = "./baseline_pnt_pairs/{:s}_recall_freq_pnt_pairs.npy"
np.save(recall_freq_pnt_file.format(save_name), np.array([tiou_thresholds_freq, recall_freq]))


